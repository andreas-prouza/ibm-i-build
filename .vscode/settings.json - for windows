{
    "terminal.integrated.defaultProfile.windows": "Command Prompt" ,
    "makefile.extensionOutputFolder": "./.vscode",
    "emeraldwalk.runonsave": {
        "commands": [
            {
                "match": ".*/ibm-i-build.*/.*$",
                "isAsync": true,
                "cmd": "if '${workspaceFolder}' == '' (echo 'Wrong local workspace folder ""') else (wsl rsync -av --rsync-path=/QOpenSys/pkgs/bin/rsync --exclude={'.git','.vscode','.project','.gitignore'} --delete $(wslpath \"${workspaceFolder}\")/ academy:~/myproject/)"
            }
        ]
    },
    "command-runner.terminal.name": "Sync project",
    "command-runner.terminal.autoClear": true,
    "command-runner.terminal.autoFocus": true,
    "command-runner.commands": {
        "Sync source to IBM i": "if '${workspaceFolder}' == '' (echo 'Wrong local workspace folder ""') else (wsl rsync -av --rsync-path=/QOpenSys/pkgs/bin/rsync --exclude={'.git','.vscode','.project','.gitignore'} --delete $(wslpath \"${workspaceFolder}\")/ academy:~/myproject/ )",
        "Sync logs back": "if '${workspaceFolder}' == '' (echo 'Wrong local workspace folder ""') else (wsl rsync -avz --rsync-path=/QOpenSys/pkgs/bin/rsync --include={'logs/***','build/***'} --exclude='*' --delete academy:~/myproject/  $(wslpath \"${workspaceFolder}\")/ )",
        "Run build (summary output)": [
            "if '${workspaceFolder}' == '' (echo 'Wrong local workspace folder ""') else (printf '#!/QOpenSys/pkgs/bin/bash'\"\\n\\n\" > compile.sh ; : '",
            "'; make all -n | tee >(grep -iv crtcmd >> compile.sh) | grep -i crtcmd\\|summary | cut -d '|' --output-delimiter ': ' -f 2 ; : '",
            "'; wsl rsync -av --rsync-path=/QOpenSys/pkgs/bin/rsync --exclude={'.git','.vscode','.project','.gitignore'} --delete $(wslpath \"${workspaceFolder}/\") academy:~/myproject/; : '",
            "'; wsl ssh academy \"source .profile; cd ~/myproject; ./compile.sh || true \" ; : '",
            "'; wsl rsync -avz --rsync-path=/QOpenSys/pkgs/bin/rsync --include={'logs/***','build/***'} --exclude='*' --delete academy:~/myproject/  $(wslpath \"${workspaceFolder}/\") | grep -v \"^deleting\" | grep joblog )"
        ],
        "Run build (detailed output)": [
            "if '${workspaceFolder}' == '' (echo 'Wrong local workspace folder ""') else (printf '#!/QOpenSys/pkgs/bin/bash'\"\\n\\n\" > compile.sh ; : '",
            "'; make all -n | tee >(grep -iv crtcmd >> compile.sh) | grep -i crtcmd | cut -d '|' --output-delimiter ': ' -f 2,3 ; : '",
            "'; wsl rsync -av --rsync-path=/QOpenSys/pkgs/bin/rsync --exclude={'.git','.vscode','.project','.gitignore'} --delete $(wslpath \"${workspaceFolder}/\") academy:~/myproject/; : '",
            "'; wsl ssh academy \"source .profile; cd ~/myproject; ./compile.sh || true \" ; : '",
            "'; wsl rsync -avz --rsync-path=/QOpenSys/pkgs/bin/rsync --include={'logs/***','build/***'} --exclude='*' --delete academy:~/myproject/  $(wslpath \"${workspaceFolder}/\") | grep -v \"^deleting\" | grep joblog )"
        ],
        "Run build (debug)": [
            "if '${workspaceFolder}' == '' (echo 'Wrong local workspace folder ""') else (printf '#!/QOpenSys/pkgs/bin/bash'\"\\n\\n\" > compile.sh ; : '",
            "'; make all -n | tee >(grep -iv crtcmd >> compile.sh) ; : '",
            "'; wsl rsync -av --rsync-path=/QOpenSys/pkgs/bin/rsync --exclude={'.git','.vscode','.project','.gitignore'} --delete $(wslpath \"${workspaceFolder}/\") academy:~/myproject/; : '",
            "'; wsl ssh academy \"source .profile; cd ~/myproject; ./compile.sh || true \" ; : '",
            "'; wsl rsync -avz --rsync-path=/QOpenSys/pkgs/bin/rsync --include={'logs/***','build/***'} --exclude='*' --delete academy:~/myproject/  $(wslpath \"${workspaceFolder}/\") | grep -v \"^deleting\" | grep joblog )"
        ],
        "Reset ALL": "wsl make clean ",
        "Show Change Debug": "wsl make all -n |grep crtcmd  ",
        "Show Change Compile": "wsl make all -n |grep crtcmd | cut -d '|' --output-delimiter ': ' -f 2,3 ",
        "Show Change Object":  "wsl make all -n |grep crtcmd | cut -d '|' --output-delimiter ': ' -f 2 "
    }

}